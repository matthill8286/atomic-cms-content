{"version":3,"sources":["../../../src/components/Error/index.tsx"],"names":["React","useEffect","Button","Heading","Grid","Cell","Row","Illustration05","IllustrationDataMaintenance","IllustrationJavascript","useLocation","StyledErrorPageContainer","StyledErrorCopyText","StyledErrorHeadingWrapper","StyledErrorImage","StyledErrorCode","ErrorPageType","ConfigurableGraphCmsHtmlSerializer","Serializer","IS_BROWSER","window","ErrorPage","errorType","TECHNICAL_ERROR","errorMessage","location","isOffline","navigator","onLine","OFFLINE_ERROR","isRedirected","pathname","includes","addEventListener","reload","errorHeadline","NOT_FOUND","errorSubLabel","errorCodeLabel","buttonLabel","svgImage","isTechnicalError","buttonProps","to","onClick","event","preventDefault","testLabels","image","text","componentHeadings","message"],"mappings":"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","sourcesContent":["import React, { FC, useEffect } from 'react'\nimport { Button, Heading, Grid, Cell, Row } from '@matthill8286/atomic-ui'\nimport {\n  Illustration05,\n  IllustrationDataMaintenance,\n  IllustrationJavascript,\n} from '@matthill8286/atomic-icon-library'\nimport { useLocation } from 'react-router-dom'\nimport {\n  StyledErrorPageContainer,\n  StyledErrorCopyText,\n  StyledErrorHeadingWrapper,\n  StyledErrorImage,\n  StyledErrorCode,\n} from './ErrorPage.styled'\nimport { ErrorPageProps, ErrorPageType } from './ErrorPage.interface'\nimport { ConfigurableGraphCmsHtmlSerializer, Serializer } from '../Serializer'\n\nexport const IS_BROWSER = typeof window !== 'undefined'\n\nexport const ErrorPage: FC<ErrorPageProps> = ({\n  errorType = ErrorPageType.TECHNICAL_ERROR,\n  errorMessage,\n}): JSX.Element => {\n  const location = useLocation()\n  const isOffline = IS_BROWSER && navigator?.onLine === false\n\n  if (isOffline) {\n    errorType = ErrorPageType.OFFLINE_ERROR\n  }\n\n  const isRedirected = location.pathname.includes('/error/500')\n\n  useEffect(() => {\n    if (isOffline) {\n      window.addEventListener(\n        'online',\n        function() {\n          window.location.reload()\n        },\n        false\n      )\n    }\n  })\n\n  interface ErrorMap {\n    [key: string]: string | JSX.Element | undefined\n  }\n\n  const errorHeadline: ErrorMap = {\n    [ErrorPageType.NOT_FOUND]: 'Not found',\n    [ErrorPageType.TECHNICAL_ERROR]: 'Something went wrong',\n    [ErrorPageType.OFFLINE_ERROR]: 'You are Offline',\n  }\n\n  const errorSubLabel: ErrorMap = {\n    [ErrorPageType.NOT_FOUND]: 'This page has either been removed or is broken',\n    [ErrorPageType.TECHNICAL_ERROR]: 'We are currently experiencing technical issues',\n    [ErrorPageType.OFFLINE_ERROR]: 'Please connect to the internet',\n  }\n\n  const errorCodeLabel: ErrorMap = {\n    [ErrorPageType.NOT_FOUND]: 'Error 404',\n    [ErrorPageType.TECHNICAL_ERROR]: 'Error 500',\n    [ErrorPageType.OFFLINE_ERROR]: 'Offline',\n  }\n\n  const buttonLabel: ErrorMap = {\n    [ErrorPageType.NOT_FOUND]: 'Dashboard',\n    [ErrorPageType.TECHNICAL_ERROR]: 'Reload',\n    [ErrorPageType.OFFLINE_ERROR]: 'Offline Reload',\n  }\n\n  const svgImage: ErrorMap = {\n    [ErrorPageType.NOT_FOUND]: <IllustrationJavascript />,\n    [ErrorPageType.TECHNICAL_ERROR]: <IllustrationDataMaintenance />,\n    [ErrorPageType.OFFLINE_ERROR]: <Illustration05 />,\n  }\n\n  const isTechnicalError = errorType === ErrorPageType.TECHNICAL_ERROR\n\n  let buttonProps = {}\n  if (errorType === ErrorPageType.NOT_FOUND || isRedirected) {\n    buttonProps = {\n      to: '/',\n    }\n  } else if (isTechnicalError) {\n    buttonProps = {\n      onClick: (event: any) => {\n        event.preventDefault()\n        window.location.reload()\n      },\n    }\n  }\n\n  const testLabels = {\n    image: `error-page-image-${errorType}`,\n    text: `error-page-text-${errorType}`,\n  }\n\n  const componentHeadings = (\n    <>\n      <StyledErrorHeadingWrapper>\n        <Heading scale=\"level-2\">{errorHeadline[errorType]}</Heading>\n      </StyledErrorHeadingWrapper>\n      <StyledErrorCopyText fontSize=\"sm\" data-test={testLabels.text}>\n        {errorSubLabel[errorType]}\n      </StyledErrorCopyText>\n    </>\n  )\n\n  return (\n    <Grid>\n      <Row>\n        <Cell columns={12}>\n          <StyledErrorPageContainer>\n            <StyledErrorImage\n              marginLeft={\n                errorType === ErrorPageType.TECHNICAL_ERROR ||\n                errorType === ErrorPageType.OFFLINE_ERROR\n              }\n              data-test={testLabels.image}>\n              {svgImage[errorType]}\n            </StyledErrorImage>\n            {errorMessage?.message ? (\n              <StyledErrorHeadingWrapper data-test={testLabels.text}>\n                {Serializer(\n                  errorMessage?.message,\n                  // @ts-ignore\n                  ConfigurableGraphCmsHtmlSerializer({})\n                )}\n              </StyledErrorHeadingWrapper>\n            ) : (\n              componentHeadings\n            )}\n            <Button size=\"lg\" actionType=\"secondary\" {...buttonProps}>\n              {isRedirected ? 'Back to Home' : buttonLabel[errorType]}\n            </Button>\n            <StyledErrorCode scale=\"small\">{errorCodeLabel[errorType]}</StyledErrorCode>\n          </StyledErrorPageContainer>\n        </Cell>\n      </Row>\n    </Grid>\n  )\n}\n\nexport default ErrorPage\nexport * from './ErrorPage.interface'\n"],"file":"index.js"}