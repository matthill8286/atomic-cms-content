{"version":3,"sources":["../../../src/components/Serializer/RichTextHtmlSerializer.test.tsx"],"names":["React","CopyText","Heading","Link","Picture","mountWithTheme","getHeadline","getParagraph","getStrongParagraph","getEmParagraph","getUrlParagraph","getImage","ConfigurableGraphCmsHtmlSerializer","Serializer","renderWrapper","richTextList","xdescribe","it","wrapper","expect","find","toHaveLength","prop","toEqual","todo","at","toBeTruthy","toBeFalsy"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { CopyText, Heading, Link, Picture, mountWithTheme } from '@matthill8286/atomic-ui'\nimport {\n  getHeadline,\n  getParagraph,\n  getStrongParagraph,\n  getEmParagraph,\n  getUrlParagraph,\n  getImage,\n} from './RichTextHtmlSerializer.mock'\nimport { ConfigurableGraphCmsHtmlSerializer } from './ConfigurableGraphCmsHtmlSerializer'\nimport { Serializer } from './HtmlSerializer'\n\nconst renderWrapper = (richTextList = []) => {\n  return mountWithTheme(<>{Serializer(richTextList, ConfigurableGraphCmsHtmlSerializer)}</>)\n}\n\nxdescribe('RichText with Serializer', () => {\n  it('renders h1 element correctly', () => {\n    const wrapper = renderWrapper([getHeadline('one', '1')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h1')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-1')\n  })\n\n  it('renders h2 element correctly', () => {\n    const wrapper = renderWrapper([getHeadline('two', '2')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h2')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-2')\n  })\n\n  it('renders h3 element correctly', () => {\n    const wrapper = renderWrapper([getHeadline('three', '3')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h3')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-3')\n  })\n\n  it('renders h4 element correctly', () => {\n    const wrapper = renderWrapper([getHeadline('four', '4')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h4')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-4')\n  })\n\n  it('renders h5 element correctly', () => {\n    const wrapper = renderWrapper([getHeadline('five', '5')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h5')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-4')\n  })\n\n  it('renders h6 element correctly', () => {\n    const wrapper = renderWrapper([getHeadline('six', '6')])\n    expect(wrapper.find(Heading)).toHaveLength(1)\n    expect(wrapper.find(Heading).prop('tag')).toEqual('h6')\n    expect(wrapper.find(Heading).prop('scale')).toEqual('level-4')\n  })\n\n  it('renders p element correctly', () => {\n    const wrapper = renderWrapper([getParagraph()])\n    expect(wrapper.find(CopyText)).toHaveLength(1)\n  })\n\n  it.todo('renders strong element correctly', () => {\n    const wrapper = renderWrapper([getStrongParagraph()])\n    expect(wrapper.find(CopyText)).toHaveLength(2)\n    // Check outer paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(0)\n        .prop('withMargins')\n    ).toBeTruthy()\n    // Check inner strong paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('withMargins')\n    ).toBeFalsy()\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('tag')\n    ).toEqual('strong')\n  })\n\n  it.todo('renders em element correctly', () => {\n    const wrapper = renderWrapper([getEmParagraph()])\n    expect(wrapper.find(CopyText)).toHaveLength(2)\n    // Check outer paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(0)\n        .prop('withMargins')\n    ).toBeTruthy()\n    // Check inner em paragraph\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('withMargins')\n    ).toBeFalsy()\n    expect(\n      wrapper\n        .find(CopyText)\n        .at(1)\n        .prop('tag')\n    ).toEqual('em')\n  })\n\n  it.todo('renders urls correctly', () => {\n    const wrapper = renderWrapper([getUrlParagraph()])\n    expect(wrapper.find(Link)).toHaveLength(1)\n    expect(wrapper.find(Link).prop('underline')).toBeTruthy()\n    expect(wrapper.find(Link).prop('href')).toEqual('https://mediamarkt.de')\n  })\n\n  it.todo('renders images correctly', () => {\n    const wrapper = renderWrapper([getImage()])\n    expect(wrapper.find(Picture)).toHaveLength(1)\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('src')\n    ).toBeTruthy()\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('alt')\n    ).toEqual('altText')\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('width')\n    ).toEqual(1920)\n    expect(\n      wrapper\n        .find(Picture)\n        .find('img')\n        .prop('height')\n    ).toEqual(1080)\n  })\n})\n"],"file":"RichTextHtmlSerializer.test.js"}