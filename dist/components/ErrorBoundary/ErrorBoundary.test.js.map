{"version":3,"sources":["../../../src/components/ErrorBoundary/ErrorBoundary.test.tsx"],"names":["mount","shallow","React","ErrorBoundary","jest","mock","useLocation","ProblemChild","Error","WellBehavedChild","FallbackContent","describe","test","wrapper","expect","toHaveLength","find","state","toBe","undefined","not"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,OAAhB,QAA+B,QAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,aAAT,QAA8B,IAA9B;AAEAC,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0B;AAAA,SAAO;AAC/BC,IAAAA,WAAW,EAAE;AAAA,aAAM,IAAN;AAAA;AADkB,GAAP;AAAA,CAA1B;;AAIA,IAAMC,YAAkC,GAAG,SAArCA,YAAqC,GAAmB;AAC5D,QAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD,CAFD;;AAIA,IAAMC,gBAAsC,GAAG,SAAzCA,gBAAyC,GAAmB;AAChE,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAI,IAAA,SAAS,EAAC;AAAd,yBADF,CADF;AAKD,CAND;;AAQA,IAAMC,eAAqC,GAAG,SAAxCA,eAAwC,GAAmB;AAC/D,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAI,IAAA,SAAS,EAAC;AAAd,wBADF,CADF;AAKD,CAND;;AAQAC,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClCC,EAAAA,IAAI,CAAC,0BAAD,EAA6B,YAAM;AACrC,QAAMC,OAAO,GAAGZ,OAAO,CACrB,oBAAC,aAAD,QACE,oBAAC,gBAAD,OADF,CADqB,CAAvB;AAKAa,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,YAAhB,CAA6B,CAA7B;AACD,GAPG,CAAJ;AASAH,EAAAA,IAAI,CAAC,8BAAD,EAAiC,YAAM;AACzC,QAAMC,OAAO,GAAGb,KAAK,CACnB,oBAAC,aAAD,QACE,oBAAC,gBAAD,OADF,CADmB,CAArB;AAKAc,IAAAA,MAAM,CAACD,OAAO,CAACG,IAAR,CAAaP,gBAAb,CAAD,CAAN,CAAuCM,YAAvC,CAAoD,CAApD;AACAD,IAAAA,MAAM,CAACD,OAAO,CAACG,IAAR,CAAa,eAAb,EAA8BC,KAA9B,CAAoC,OAApC,CAAD,CAAN,CAAqDC,IAArD,CAA0DC,SAA1D;AACD,GARG,CAAJ;AAUAP,EAAAA,IAAI,CAAC,wDAAD,EAA2D,YAAM;AACnE,QAAMC,OAAO,GAAGb,KAAK,CACnB,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAEU;AAAzB,OACE,oBAAC,YAAD,OADF,CADmB,CAArB;AAMAI,IAAAA,MAAM,CAACD,OAAO,CAACG,IAAR,CAAaN,eAAb,CAAD,CAAN,CAAsCK,YAAtC,CAAmD,CAAnD;AACAD,IAAAA,MAAM,CAACD,OAAO,CAACG,IAAR,CAAa,eAAb,EAA8BC,KAA9B,CAAoC,OAApC,CAAD,CAAN,CAAqDG,GAArD,CAAyDF,IAAzD,CAA8DC,SAA9D;AACD,GATG,CAAJ;AAUD,CA9BO,CAAR","sourcesContent":["import { mount, shallow } from 'enzyme'\nimport * as React from 'react'\nimport { EmptyProps } from './ErrorBoundary.interface'\nimport { ErrorBoundary } from './'\n\njest.mock('react-router', () => ({\n  useLocation: () => null,\n}))\n\nconst ProblemChild: React.FC<EmptyProps> = (): JSX.Element => {\n  throw new Error('ProblemChild is throwing things')\n}\n\nconst WellBehavedChild: React.FC<EmptyProps> = (): JSX.Element => {\n  return (\n    <div className=\"well-behaved-child\">\n      <h1 className=\"well-behaved-child__title\">I am well behaved</h1>\n    </div>\n  )\n}\n\nconst FallbackContent: React.FC<EmptyProps> = (): JSX.Element => {\n  return (\n    <div className=\"fallback-content\">\n      <h1 className=\"fallback-content\">An error occured</h1>\n    </div>\n  )\n}\n\ndescribe('<ErrorBoundary />', () => {\n  test('Renders without crashing', () => {\n    const wrapper = shallow(\n      <ErrorBoundary>\n        <WellBehavedChild />\n      </ErrorBoundary>\n    )\n    expect(wrapper).toHaveLength(1)\n  })\n\n  test('Renders children if no error', () => {\n    const wrapper = mount(\n      <ErrorBoundary>\n        <WellBehavedChild />\n      </ErrorBoundary>\n    )\n    expect(wrapper.find(WellBehavedChild)).toHaveLength(1)\n    expect(wrapper.find('ErrorBoundary').state('error')).toBe(undefined)\n  })\n\n  test('Displays the fallback component upon error if provided', () => {\n    const wrapper = mount(\n      <ErrorBoundary Fallback={FallbackContent}>\n        <ProblemChild />\n      </ErrorBoundary>\n    )\n\n    expect(wrapper.find(FallbackContent)).toHaveLength(1)\n    expect(wrapper.find('ErrorBoundary').state('error')).not.toBe(undefined)\n  })\n})\n"],"file":"ErrorBoundary.test.js"}