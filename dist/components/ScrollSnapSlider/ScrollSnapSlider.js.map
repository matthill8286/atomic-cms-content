{"version":3,"sources":["../../../src/components/ScrollSnapSlider/ScrollSnapSlider.tsx"],"names":["React","useEffect","Slider","NavArrow","Scrollbar","StyledHeading","StyledOverflowWrapper","StyledWrapper","StyledHeadingNoGrid","StyledGridScrollbar","scrollSnapPolyfill","window","require","StyledCarousel","StyledScrollSnapSliderCarousel","StyledSlider","StyledScrollSnapSliderSlider","StyledUl","StyledScrollSnapSliderList","StyledSlide","StyledScrollSnapSliderSlide","StyledNavWrapper","StyledScrollSnapSliderNavWrapper","StyledArrow","StyledScrollSnapSliderArrow","StyledScrollbar","StyledScrollSnapSliderScrollbar","ScrollSnapSlider","forwardRef","externalRef","slidesPerPageSettings","title","withGrid","isGridLayout","showArrows","showScrollbar","fixedArrowPosition","zeroArrowPosition","overEdgePosition","arrowPrevClass","arrowNextClass","arrowDataTest","showArrowsOnHover","slideWidth","onScrollStart","onScrollEnd","onSlidesVisibilityChange","onSlideVisible","children","props","useState","rerender","internalRef","useRef","renderCustomArrow","direction","ref","onClick","setRefs","useCallback","carouselRef","current","renderContent","sliderRef"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { Slider } from '@lifarl/react-scroll-snap-slider'\nimport { ScrollSnapSliderProps } from './ScrollSnapSlider.interface'\nimport { NavArrow } from './NavArrow'\nimport { Scrollbar } from './Scrollbar'\nimport {\n  StyledHeading,\n  StyledOverflowWrapper,\n  StyledWrapper,\n  StyledHeadingNoGrid,\n  StyledGridScrollbar,\n} from './ScrollSnapSlider.styled'\n\nconst scrollSnapPolyfill =\n  typeof window !== 'undefined' ? require('css-scroll-snap-polyfill') : null\n\nexport {\n  StyledCarousel as StyledScrollSnapSliderCarousel,\n  StyledSlider as StyledScrollSnapSliderSlider,\n  StyledUl as StyledScrollSnapSliderList,\n  StyledSlide as StyledScrollSnapSliderSlide,\n  StyledNavWrapper as StyledScrollSnapSliderNavWrapper,\n  StyledArrow as StyledScrollSnapSliderArrow,\n} from '@lifarl/react-scroll-snap-slider'\nexport { StyledScrollbar as StyledScrollSnapSliderScrollbar } from './ScrollSnapSlider.styled'\n\nexport interface ScrollSnapSliderRef {\n  scrollToSlide: () => void\n  sliderRef: React.RefObject<HTMLDivElement>\n}\n\nexport const ScrollSnapSlider: React.FC<ScrollSnapSliderProps> = React.forwardRef<\n  ScrollSnapSliderRef,\n  ScrollSnapSliderProps\n>(\n  (\n    {\n      slidesPerPageSettings,\n      title,\n      withGrid = false,\n      isGridLayout = true,\n      showArrows = true,\n      showScrollbar = false,\n      fixedArrowPosition = true,\n      zeroArrowPosition = false,\n      overEdgePosition = false,\n      arrowPrevClass,\n      arrowNextClass,\n      arrowDataTest,\n      showArrowsOnHover = true,\n      slideWidth,\n      onScrollStart,\n      onScrollEnd,\n      onSlidesVisibilityChange,\n      onSlideVisible,\n      children,\n      ...props\n    },\n    externalRef\n  ) => {\n    useEffect(() => {\n      scrollSnapPolyfill()\n    }, [])\n\n    const [, rerender] = React.useState(false)\n\n    const internalRef = React.useRef<ScrollSnapSliderRef | null>(null)\n\n    const renderCustomArrow = ({ direction, ref, onClick }) => (\n      <NavArrow\n        direction={direction}\n        ref={ref}\n        onClick={() => onClick(direction)}\n        showArrows={showArrows}\n        fixedArrowPosition={fixedArrowPosition}\n        zeroArrowPosition={zeroArrowPosition}\n      />\n    )\n\n    const setRefs = React.useCallback(\n      carouselRef => {\n        internalRef.current = carouselRef as ScrollSnapSliderRef\n\n        if (typeof externalRef !== 'function' && externalRef) {\n          externalRef.current = carouselRef as ScrollSnapSliderRef\n        }\n        rerender(showScrollbar)\n      },\n      [externalRef, internalRef, rerender, showScrollbar]\n    )\n\n    const renderContent = () => (\n      <StyledWrapper isGridLayout={isGridLayout} showArrowsOnHover={showArrowsOnHover} {...props}>\n        <Slider\n          ref={setRefs}\n          slideWidth={slideWidth}\n          slidesPerPageSettings={slidesPerPageSettings}\n          renderCustomArrow={renderCustomArrow}\n          onScrollStart={onScrollStart}\n          onScrollEnd={onScrollEnd}\n          onSlidesVisibilityChange={onSlidesVisibilityChange}\n          onSlideVisible={onSlideVisible}>\n          {children}\n        </Slider>\n      </StyledWrapper>\n    )\n\n    if (withGrid) {\n      return (\n        <StyledOverflowWrapper>\n          {title ? <StyledHeading>{title}</StyledHeading> : null}\n          {renderContent()}\n          {showScrollbar && (\n            <StyledGridScrollbar>\n              <Scrollbar sliderRef={internalRef.current?.sliderRef} />\n            </StyledGridScrollbar>\n          )}\n        </StyledOverflowWrapper>\n      )\n    }\n\n    return (\n      <>\n        {title ? <StyledHeadingNoGrid>{title}</StyledHeadingNoGrid> : null}\n        {renderContent()}\n        {showScrollbar && <Scrollbar sliderRef={internalRef.current?.sliderRef} />}\n      </>\n    )\n  }\n)\n"],"file":"ScrollSnapSlider.js"}