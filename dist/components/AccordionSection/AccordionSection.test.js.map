{"version":3,"sources":["../../../src/components/AccordionSection/AccordionSection.test.tsx"],"names":["cleanup","React","mountWithTheme","Accordion","CopyText","Heading","router","AccordionSection","AccordionSchemaType","testText","accordionEntries","entries","anchorId","entryHeadline","raw","type","children","text","entryContent","afterEach","xdescribe","describe","beforeEach","jest","spyOn","mockReturnValue","pathname","hash","search","state","key","it","accordionSection","Faq","accordion","find","expect","prop","toBeUndefined","beforeAll","toBe","title","first","content","None"],"mappings":"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","sourcesContent":["import {cleanup} from '@testing-library/react';\nimport * as React from 'react';\nimport {\n  mountWithTheme,\n  Accordion,\n  CopyText,\n  Heading,\n} from '@matthill8286/atomic-ui';\nimport router from 'react-router';\nimport {AccordionSection} from './index';\nimport {\n  AccordionSectionProps,\n  AccordionSchemaType,\n} from './AccordionSection.types';\n\nconst testText =\n  'Never gonna give you up Never gonna let you down Never gonna run around and desert you';\nconst accordionEntries: AccordionSectionProps = {\n  entries: [\n    {\n      anchorId: 'letmeanchoryou',\n      entryHeadline: {\n        raw: {type: 'heading3', children: [{text: \"It's a headline\"}]},\n      },\n      entryContent: {\n        raw: {\n          type: 'paragraph',\n          children: [{text: testText}],\n        },\n      },\n    },\n  ],\n};\n\nafterEach(cleanup);\n\nxdescribe('Content:Common:Components:AccordionSection', () => {\n  describe('closed accordion', () => {\n    beforeEach(() => {\n      jest.spyOn(router, 'useLocation').mockReturnValue({\n        pathname: '/let/me/be/your/pathName',\n        hash: '',\n        search: '',\n        state: {},\n        key: '',\n      });\n    });\n\n    it('renders closed accordion', () => {\n      const accordionSection = mountWithTheme(\n        <AccordionSection\n          schemaType={AccordionSchemaType.Faq}\n          entries={accordionEntries.entries}\n        />\n      );\n      const accordion = accordionSection.find(Accordion);\n      expect(accordion.prop('openedIndex')).toBeUndefined();\n    });\n  });\n\n  xdescribe('open accordion', () => {\n    beforeAll(() => {\n      jest.spyOn(router, 'useLocation').mockReturnValue({\n        pathname: '/let/me/be/your/pathName',\n        hash: '#letmeanchoryou',\n        search: '',\n        state: {},\n        key: '',\n      });\n    });\n\n    it('renders open accordion', () => {\n      const accordionSection = mountWithTheme(\n        <AccordionSection\n          schemaType={AccordionSchemaType.Faq}\n          entries={accordionEntries.entries}\n        />\n      );\n      const accordion = accordionSection.find(Accordion);\n      expect(accordion.prop('openedIndex')).toBe(0);\n    });\n\n    it('renders section with accordion and content', () => {\n      const accordionSection = mountWithTheme(\n        <AccordionSection entries={accordionEntries.entries} />\n      );\n      const title = accordionSection.find(Heading).first();\n      expect(title.text()).toBe(\"It's a headline\");\n      const content = accordionSection.find(CopyText).first();\n      expect(content.text()).toBe(testText);\n    });\n\n    it('renders accordion with a default none schemaType', () => {\n      const accordionSection = mountWithTheme(\n        <AccordionSection entries={accordionEntries.entries} />\n      );\n      const accordion = accordionSection.find(Accordion);\n      expect(accordion.prop('schemaType')).toBe(AccordionSchemaType.None);\n    });\n\n    it('renders accordion with a FAQ schemaType', () => {\n      const accordionSection = mountWithTheme(\n        <AccordionSection\n          schemaType={AccordionSchemaType.Faq}\n          entries={accordionEntries.entries}\n        />\n      );\n      const accordion = accordionSection.find(Accordion);\n      expect(accordion.prop('schemaType')).toBe(AccordionSchemaType.Faq);\n    });\n  });\n});\n"],"file":"AccordionSection.test.js"}