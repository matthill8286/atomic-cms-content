{"version":3,"sources":["../../../src/components/FaqSection/FaqSection.test.tsx"],"names":["React","mountWithTheme","FAQSection","AccordionSection","AccordionSchemaType","Elements","testQuestion","testAnswer","testFaqHeadline","faqHeadline","raw","children","type","text","faqAccordionEntries","entries","anchorId","entryHeadline","heading3","entryContent","paragraph","repeat","faqEntries","jest","mock","useLocation","xdescribe","it","renderedFAQ","findRichText","find","console","log","expect","toHaveLength","at","toBe","accordionSection","prop","Faq"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { mountWithTheme } from '@matthill8286/atomic-ui'\nimport { FAQSection, FAQSectionProps } from './index'\nimport {\n  AccordionSection,\n  AccordionSchemaType,\n  AccordionSectionHeadline,\n  AccordionSectionProps,\n} from '../AccordionSection'\nimport { FaqEntryType } from './FaqSection.types'\nimport { Elements } from '../../types/richtext'\n\nconst testQuestion = 'Who is the fastest of them all?'\nconst testAnswer = 'mirror mirror on the wall ...'\nconst testFaqHeadline = 'Queens in modern times'\n\nconst faqHeadline: AccordionSectionHeadline = {\n  raw: {\n    children: [{ type: 'heading1', children: [{ text: testFaqHeadline }] }],\n  },\n}\n\nconst faqAccordionEntries: FAQSectionProps = {\n  entries: [\n    {\n      anchorId: 'letmeanchoryou',\n      entryHeadline: {\n        raw: { children: [{ type: Elements.heading3, children: [{ text: \"It's a headline\" }] }] },\n      },\n      entryContent: {\n        raw: {\n          children: [\n            {\n              type: Elements.paragraph,\n              children: [{ text: 'Testing can be tested in the most testing of tests' }],\n            },\n          ],\n        },\n      },\n    },\n    {\n      anchorId: 'second',\n      entryHeadline: {\n        raw: {\n          children: [{ type: Elements.heading3, children: [{ text: \"It's a second headline\" }] }],\n        },\n      },\n      entryContent: {\n        raw: {\n          children: [\n            {\n              type: Elements.paragraph,\n              children: [{ text: 'Testing can be tested in the most testing of tests'.repeat(2) }],\n            },\n          ],\n        },\n      },\n    },\n    {\n      anchorId: 'third',\n      entryHeadline: {\n        raw: {\n          children: [{ type: Elements.heading3, children: [{ text: \"It's a third headline\" }] }],\n        },\n      },\n      entryContent: {\n        raw: {\n          children: [\n            {\n              type: Elements.paragraph,\n              children: [{ text: 'Testing can be tested in the most testing of tests'.repeat(11) }],\n            },\n          ],\n        },\n      },\n    },\n  ],\n}\n\nconst faqEntries: FaqEntryType[] = []\n\njest.mock('react-router', () => ({\n  useLocation: () => 'http://localhost:4000',\n}))\n\nxdescribe('Content:Common:FAQSection', () => {\n  it('renders FAQSection with Headline, Question and Answer', () => {\n    const renderedFAQ = mountWithTheme(\n      <FAQSection entries={faqAccordionEntries.entries} headline={faqHeadline} />\n    )\n    const findRichText = renderedFAQ.find('RichText')\n\n    console.log('findRichText', { findRichText })\n\n    expect(findRichText).toHaveLength(3)\n    expect(findRichText.at(0).text()).toBe(testFaqHeadline)\n    expect(findRichText.at(1).text()).toBe(testQuestion)\n    expect(findRichText.at(2).text()).toBe(testAnswer)\n  })\n\n  it('renders Accordion section with FAQ schema type prop', () => {\n    const renderedFAQ = mountWithTheme(\n      <FAQSection entries={faqAccordionEntries.entries} headline={faqHeadline} />\n    )\n\n    const accordionSection = renderedFAQ.find(AccordionSection)\n\n    expect(accordionSection).toHaveLength(1)\n    expect(accordionSection.prop('schemaType')).toBe(AccordionSchemaType.Faq)\n  })\n})\n"],"file":"FaqSection.test.js"}