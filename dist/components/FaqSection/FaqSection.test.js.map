{"version":3,"sources":["../../../src/components/FaqSection/FaqSection.test.tsx"],"names":["React","mountWithTheme","FAQSection","AccordionSection","AccordionSchemaType","testQuestion","testAnswer","testFaqHeadline","faqHeadline","type","children","text","faqEntries","jest","mock","useLocation","xdescribe","it","skip","renderedFAQ","findRichText","find","expect","toHaveLength","at","toBe","accordionSection","prop","Faq"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,cAAR,QAA6B,yBAA7B;AACA,SAAQC,UAAR;AACA,SACEC,gBADF,EAEEC,mBAFF;AAOA,IAAMC,YAAY,GAAG,iCAArB;AACA,IAAMC,UAAU,GAAG,+BAAnB;AACA,IAAMC,eAAe,GAAG,wBAAxB;AAEA,IAAMC,WAAuC,GAAG,CAC9C;AAACC,EAAAA,IAAI,EAAE,UAAP;AAAmBC,EAAAA,QAAQ,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAEJ;AAAP,GAAD;AAA7B,CAD8C,CAAhD;AAIA,IAAMK,UAA0B,GAAG,EAAnC;AAEAC,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0B;AAAA,SAAO;AAC/BC,IAAAA,WAAW,EAAE;AAAA,aAAM,uBAAN;AAAA;AADkB,GAAP;AAAA,CAA1B;AAIAC,SAAS,CAAC,2BAAD,EAA8B,YAAM;AAC3CC,EAAAA,EAAE,CAACC,IAAH,CAAQ,uDAAR,EAAiE,YAAM;AACrE,QAAMC,WAAW,GAAGlB,cAAc,CAChC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAEW,UAArB;AAAiC,MAAA,QAAQ,EAAEJ,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADgC,CAAlC;AAGA,QAAMY,YAAY,GAAGD,WAAW,CAACE,IAAZ,CAAiB,UAAjB,CAArB;AAEAC,IAAAA,MAAM,CAACF,YAAD,CAAN,CAAqBG,YAArB,CAAkC,CAAlC;AACAD,IAAAA,MAAM,CAACF,YAAY,CAACI,EAAb,CAAgB,CAAhB,EAAmBb,IAAnB,EAAD,CAAN,CAAkCc,IAAlC,CAAuClB,eAAvC;AACAe,IAAAA,MAAM,CAACF,YAAY,CAACI,EAAb,CAAgB,CAAhB,EAAmBb,IAAnB,EAAD,CAAN,CAAkCc,IAAlC,CAAuCpB,YAAvC;AACAiB,IAAAA,MAAM,CAACF,YAAY,CAACI,EAAb,CAAgB,CAAhB,EAAmBb,IAAnB,EAAD,CAAN,CAAkCc,IAAlC,CAAuCnB,UAAvC;AACD,GAVD;AAYAW,EAAAA,EAAE,CAACC,IAAH,CAAQ,qDAAR,EAA+D,YAAM;AACnE,QAAMC,WAAW,GAAGlB,cAAc,CAChC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAEW,UAArB;AAAiC,MAAA,QAAQ,EAAEJ,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADgC,CAAlC;AAIA,QAAMkB,gBAAgB,GAAGP,WAAW,CAACE,IAAZ,CAAiBlB,gBAAjB,CAAzB;AAEAmB,IAAAA,MAAM,CAACI,gBAAD,CAAN,CAAyBH,YAAzB,CAAsC,CAAtC;AACAD,IAAAA,MAAM,CAACI,gBAAgB,CAACC,IAAjB,CAAsB,YAAtB,CAAD,CAAN,CAA4CF,IAA5C,CAAiDrB,mBAAmB,CAACwB,GAArE;AACD,GATD;AAUD,CAvBQ,CAAT","sourcesContent":["import * as React from 'react';\nimport {mountWithTheme} from '@matthill8286/atomic-ui';\nimport {FAQSection} from './index';\nimport {\n  AccordionSection,\n  AccordionSchemaType,\n  AccordionSectionHeadline,\n} from '../AccordionSection';\nimport {FaqEntryType} from './FaqSection.types';\n\nconst testQuestion = 'Who is the fastest of them all?';\nconst testAnswer = 'mirror mirror on the wall ...';\nconst testFaqHeadline = 'Queens in modern times';\n\nconst faqHeadline: AccordionSectionHeadline[] = [\n  {type: 'heading1', children: [{text: testFaqHeadline}]},\n];\n\nconst faqEntries: FaqEntryType[] = [];\n\njest.mock('react-router', () => ({\n  useLocation: () => 'http://localhost:4000',\n}));\n\nxdescribe('Content:Common:FAQSection', () => {\n  it.skip('renders FAQSection with Headline, Question and Answer', () => {\n    const renderedFAQ = mountWithTheme(\n      <FAQSection entries={faqEntries} headline={faqHeadline} />\n    );\n    const findRichText = renderedFAQ.find('RichText');\n\n    expect(findRichText).toHaveLength(3);\n    expect(findRichText.at(0).text()).toBe(testFaqHeadline);\n    expect(findRichText.at(1).text()).toBe(testQuestion);\n    expect(findRichText.at(2).text()).toBe(testAnswer);\n  });\n\n  it.skip('renders Accordion section with FAQ schema type prop', () => {\n    const renderedFAQ = mountWithTheme(\n      <FAQSection entries={faqEntries} headline={faqHeadline} />\n    );\n\n    const accordionSection = renderedFAQ.find(AccordionSection);\n\n    expect(accordionSection).toHaveLength(1);\n    expect(accordionSection.prop('schemaType')).toBe(AccordionSchemaType.Faq);\n  });\n});\n"],"file":"FaqSection.test.js"}