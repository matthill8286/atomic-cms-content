{"version":3,"sources":["../../../src/components/ImageTextSection/ImageTextSection.test.tsx"],"names":["React","cleanup","CopyText","Heading","LazyLoadImage","mountWithTheme","ImageAndText","ImageTextSection","xdescribe","afterEach","props","titleInternal","image","url","imageAlignment","text","type","children","anchorId","imageTextWithoutImage","it","imageAndTextSection","find","first","expect","src","toBe","header","paragraph","toHaveLength"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { cleanup } from '@testing-library/react'\nimport {\n  CopyText,\n  Heading,\n  LazyLoadImage,\n  mountWithTheme,\n  ImageAndText,\n} from '@matthill8286/atomic-ui'\nimport { ImageAndTextSectionField } from './ImageTextSection.types'\nimport { ImageTextSection } from './index'\n\nxdescribe('Landing:Components:ImageTextSection', () => {\n  afterEach(cleanup)\n  const props: ImageAndTextSectionField = {\n    titleInternal: 'image and text title',\n    image: {\n      url: 'testUrl.png',\n    },\n    imageAlignment: 'right',\n    text: [\n      {\n        type: 'heading3',\n        children: [{ text: 'This is the Header of ImageTextSection' }],\n      },\n      {\n        type: 'paragraph',\n        children: [{ text: 'This is an ImageAndTextSection' }],\n      },\n    ],\n    anchorId: 'imageTextAnchorId',\n  }\n\n  const imageTextWithoutImage: ImageAndTextSectionField = {\n    titleInternal: 'image and text title',\n    image: null,\n    imageAlignment: 'right',\n    text: [\n      {\n        children: [\n          {\n            type: 'heading3',\n            children: [{ text: 'This is the Header of ImageTextSection' }],\n          },\n          {\n            type: 'paragraph',\n            children: [{ text: 'This is an ImageAndTextSection' }],\n          },\n        ],\n      },\n    ],\n    anchorId: 'imageTextAnchorId',\n  }\n\n  it('renders section with image', () => {\n    const imageAndTextSection = mountWithTheme(<ImageTextSection imageAndTextFields={[props]} />)\n    const image = imageAndTextSection.find(LazyLoadImage).first()\n    // @ts-ignore\n    expect(image.props().src).toBe(props.image.url)\n  })\n\n  it('renders section with header and paragraph', () => {\n    const imageAndTextSection = mountWithTheme(<ImageTextSection imageAndTextFields={[props]} />)\n    const header = imageAndTextSection.find(Heading).first()\n    const paragraph = imageAndTextSection.find(CopyText).first()\n    expect(header.text()).toBe(props.text[0].text)\n    expect(paragraph.text()).toBe(props.text[1].text)\n  })\n\n  it('renders section without image', () => {\n    const imageAndTextSection = mountWithTheme(\n      <ImageTextSection imageAndTextFields={[imageTextWithoutImage]} />\n    )\n\n    expect(imageAndTextSection.find(ImageAndText)).toHaveLength(0)\n  })\n})\n"],"file":"ImageTextSection.test.js"}