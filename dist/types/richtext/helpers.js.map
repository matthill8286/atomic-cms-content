{"version":3,"sources":["../../../src/types/richtext/helpers.ts"],"names":["INLINES","BLOCKS","isInline","node","Object","values","includes","isMark","keysOf","keys","valuesOf","intersection","filter","element","length","isBlock","type","isText","hasValue","text","undefined"],"mappings":"AAAA,SAAmCA,OAAnC,EAA4CC,MAA5C;AAKA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAA8C;AAEnD,SAAOC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,QAAvB,CAAgCH,IAAhC,CAAP;AACD;AAKD,OAAO,SAASI,MAAT,CAAgBJ,IAAhB,EAA0C;AAC/C,MAAMK,MAAM,GAAGJ,MAAM,CAACK,IAAP,CAAYN,IAAZ,CAAf;AACA,MAAMO,QAAQ,GAAGN,MAAM,CAACC,MAAP,CAAcL,OAAd,CAAjB;AAEA,MAAMW,YAAY,GAAGH,MAAM,CAACI,MAAP,CAAc,UAAAC,OAAO;AAAA,WAAIH,QAAQ,CAACJ,QAAT,CAAkBO,OAAlB,CAAJ;AAAA,GAArB,CAArB;AACA,SAAOF,YAAY,CAACG,MAAb,IAAuB,CAA9B;AACD;AAKD,OAAO,SAASC,OAAT,CAAiBZ,IAAjB,EAA4C;AAEjD,SAAOC,MAAM,CAACC,MAAP,CAAcJ,MAAd,EAAsBK,QAAtB,CAA+BH,IAAI,CAACa,IAApC,CAAP;AACD;AAKD,OAAO,SAASC,MAAT,CAAgBd,IAAhB,EAA0C;AAC/C,SAAOA,IAAI,CAACa,IAAL,KAAc,MAArB;AACD;AAKD,OAAO,SAASE,QAAT,CAAkBf,IAAlB,EAAyC;AAC9C,SAAOA,IAAI,CAACgB,IAAL,KAAcC,SAAd,IAA2B,OAAOjB,IAAI,CAACgB,IAAZ,KAAqB,QAAvD;AACD","sourcesContent":["import {Node, Block, Inline, Text, INLINES, BLOCKS, Mark} from '../index';\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  // @ts-expect-error\n  return Object.values(INLINES).includes(node);\n}\n\n/**\n * Checks if the node is an instance of Mark.\n */\nexport function isMark(node: Node): node is Mark {\n  const keysOf = Object.keys(node);\n  const valuesOf = Object.values(INLINES);\n  // @ts-expect-error\n  const intersection = keysOf.filter(element => valuesOf.includes(element));\n  return intersection.length >= 0;\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  // @ts-expect-error\n  return Object.values(BLOCKS).includes(node.type);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.type === 'text';\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function hasValue(node: {text?: string}) {\n  return node.text !== undefined || typeof node.text === 'string';\n}\n"],"file":"helpers.js"}